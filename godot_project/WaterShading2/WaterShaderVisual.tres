[gd_resource type="VisualShader" load_steps=17 format=2]

[sub_resource type="VisualShaderNodeInput" id=13]
input_name = "vertex"

[sub_resource type="VisualShaderNodeVectorFunc" id=14]

[sub_resource type="VisualShaderNodeVectorOp" id=15]
operator = 8

[sub_resource type="VisualShaderNodeVectorDerivativeFunc" id=16]
function = 1

[sub_resource type="VisualShaderNodeVectorDerivativeFunc" id=17]
function = 2

[sub_resource type="VisualShaderNodeColorConstant" id=18]
constant = Color( 0, 0.4, 0.8, 1 )

[sub_resource type="VisualShaderNodeFresnel" id=19]

[sub_resource type="VisualShaderNodeInput" id=20]
input_name = "view"

[sub_resource type="VisualShaderNodeTextureUniform" id=5]
uniform_name = "height_map"
color_default = 1

[sub_resource type="VisualShaderNodeVectorCompose" id=6]

[sub_resource type="VisualShaderNodeVectorDecompose" id=7]

[sub_resource type="VisualShaderNodeVectorOp" id=8]

[sub_resource type="VisualShaderNodeVectorCompose" id=9]

[sub_resource type="VisualShaderNodeInput" id=10]
input_name = "vertex"

[sub_resource type="VisualShaderNodeVectorOp" id=11]

[sub_resource type="VisualShaderNodeInput" id=12]
input_name = "uv"

[resource]
code = "shader_type spatial;
uniform sampler2D height_map : hint_black;



void vertex() {
// Input:9
	vec3 n_out9p0;
	n_out9p0 = vec3(UV,0.0);

// TextureUniform:2
	vec3 n_out2p0;
	float n_out2p1;
	{
		vec4 n_tex_read = texture( height_map , n_out9p0.xy );
		n_out2p0 = n_tex_read.rgb;
		n_out2p1 = n_tex_read.a;
	}

// VectorDecompose:4
	float n_out4p0;
	float n_out4p1;
	float n_out4p2;
	n_out4p0 = n_out2p0.x;
	n_out4p1 = n_out2p0.y;
	n_out4p2 = n_out2p0.z;

// VectorCompose:3
	float n_in3p0 = 0.00000;
	float n_in3p2 = 0.00000;
	vec3 n_out3p0;
	n_out3p0 = vec3( n_in3p0 , n_out4p1 , n_in3p2 );

// VectorCompose:6
	float n_in6p1 = 0.00000;
	vec3 n_out6p0;
	n_out6p0 = vec3( n_out4p0 , n_in6p1 , n_out4p2 );

// Input:7
	vec3 n_out7p0;
	n_out7p0 = VERTEX;

// VectorOp:8
	vec3 n_out8p0;
	n_out8p0 = n_out6p0 + n_out7p0;

// VectorOp:5
	vec3 n_out5p0;
	n_out5p0 = n_out3p0 + n_out8p0;

// Output:0
	VERTEX = n_out5p0;

}

void fragment() {
// Color:7
	vec3 n_out7p0;
	float n_out7p1;
	n_out7p0 = vec3(0.000000,0.400000,0.800000);
	n_out7p1 = 1.000000;

// Input:2
	vec3 n_out2p0;
	n_out2p0 = VERTEX;

// VectorDerivativeFunc:5
	vec3 n_out5p0;
	n_out5p0=dFdx(n_out2p0);

// VectorDerivativeFunc:6
	vec3 n_out6p0;
	n_out6p0=dFdy(n_out2p0);

// VectorOp:4
	vec3 n_out4p0;
	n_out4p0 = cross( n_out5p0 , n_out6p0 );

// VectorFunc:3
	vec3 n_out3p0;
	n_out3p0=normalize(n_out4p0);

// Input:9
	vec3 n_out9p0;
	n_out9p0 = VIEW;

// Fresnel:8
	bool n_in8p2 = false;
	float n_in8p3 = 1.00000;
	float n_out8p0;
	n_out8p0 = n_in8p2 ? (pow(clamp(dot(n_out3p0, n_out9p0), 0.0, 1.0), n_in8p3)) : (pow(1.0 - clamp(dot(n_out3p0, n_out9p0), 0.0, 1.0), n_in8p3));
// Output:0
	ALBEDO = n_out7p0;
	ALPHA = n_out8p0;
	NORMAL = n_out3p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -484, 73 )
nodes/vertex/0/position = Vector2( 720, 160 )
nodes/vertex/2/node = SubResource( 5 )
nodes/vertex/2/position = Vector2( -400, 200 )
nodes/vertex/3/node = SubResource( 6 )
nodes/vertex/3/position = Vector2( 40, 160 )
nodes/vertex/4/node = SubResource( 7 )
nodes/vertex/4/position = Vector2( -200, 280 )
nodes/vertex/5/node = SubResource( 8 )
nodes/vertex/5/position = Vector2( 480, 260 )
nodes/vertex/6/node = SubResource( 9 )
nodes/vertex/6/position = Vector2( 40, 300 )
nodes/vertex/7/node = SubResource( 10 )
nodes/vertex/7/position = Vector2( 60, 420 )
nodes/vertex/8/node = SubResource( 11 )
nodes/vertex/8/position = Vector2( 280, 360 )
nodes/vertex/9/node = SubResource( 12 )
nodes/vertex/9/position = Vector2( -560, 280 )
nodes/vertex/connections = PoolIntArray( 2, 0, 4, 0, 4, 1, 3, 1, 3, 0, 5, 0, 5, 0, 0, 0, 4, 0, 6, 0, 4, 2, 6, 2, 7, 0, 8, 1, 6, 0, 8, 0, 8, 0, 5, 1, 9, 0, 2, 0, 2, 0, 4, 0, 4, 1, 3, 1, 3, 0, 5, 0, 5, 0, 0, 0, 4, 0, 6, 0, 4, 2, 6, 2, 7, 0, 8, 1, 6, 0, 8, 0, 8, 0, 5, 1, 9, 0, 2, 0 )
nodes/fragment/0/position = Vector2( 620, 180 )
nodes/fragment/2/node = SubResource( 13 )
nodes/fragment/2/position = Vector2( -680, 340 )
nodes/fragment/3/node = SubResource( 14 )
nodes/fragment/3/position = Vector2( 0, 320 )
nodes/fragment/4/node = SubResource( 15 )
nodes/fragment/4/position = Vector2( -200, 300 )
nodes/fragment/5/node = SubResource( 16 )
nodes/fragment/5/position = Vector2( -460, 260 )
nodes/fragment/6/node = SubResource( 17 )
nodes/fragment/6/position = Vector2( -460, 420 )
nodes/fragment/7/node = SubResource( 18 )
nodes/fragment/7/position = Vector2( 440, 100 )
nodes/fragment/8/node = SubResource( 19 )
nodes/fragment/8/position = Vector2( 220, 180 )
nodes/fragment/9/node = SubResource( 20 )
nodes/fragment/9/position = Vector2( 0, 200 )
nodes/fragment/connections = PoolIntArray( 3, 0, 0, 7, 4, 0, 3, 0, 5, 0, 4, 0, 2, 0, 5, 0, 6, 0, 4, 1, 2, 0, 6, 0, 7, 0, 0, 0, 3, 0, 0, 7, 4, 0, 3, 0, 5, 0, 4, 0, 2, 0, 5, 0, 6, 0, 4, 1, 2, 0, 6, 0, 7, 0, 0, 0, 3, 0, 8, 0, 9, 0, 8, 1, 8, 0, 0, 1 )
